plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'signing'
    /*
    id 'org.gradle.maven-publish'
     */
}

group = 'io.github.potjerodekool'
version = '0.0.1'

repositories {
    mavenLocal()
    mavenCentral()
}

gradlePlugin {
    //website = 'https://github.com/potjerodekool/openapi-generator'
    //vcsUrl = 'https://github.com/potjerodekool/openapi-generator.git'

    plugins {
        openApiPlugin {
            id = 'io.github.potjerodekool.openapi.gradle.openapi'
            displayName = 'OpenApi code generator'
            description = 'Generates code from openapi files'
            implementationClass = 'io.github.potjerodekool.openapi.gradle.OpenApiPlugin'
        }
    }
}

dependencies {
    implementation 'io.github.potjerodekool:code-generator:1.0-SNAPSHOT'

    testCompileOnly('org.junit.jupiter:junit-jupiter:5.9.0')
    testCompileOnly('org.junit.jupiter:junit-jupiter-engine:5.9.0')

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

    //testImplementation platform("org.spockframework:spock-bom:2.1-groovy-3.0")
    //testImplementation 'org.spockframework:spock-core'

    //integrationTestImplementation platform("org.spockframework:spock-bom:2.1-groovy-3.0")
    //integrationTestImplementation 'org.spockframework:spock-core'

    //functionalTestImplementation platform("org.spockframework:spock-bom:2.1-groovy-3.0")
    //functionalTestImplementation 'org.spockframework:spock-core'
}

tasks.withType(Test).configureEach {
    // Using JUnitPlatform for running tests
    useJUnitPlatform()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }

    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group.toString()
            artifactId = project.name
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = project.group.toString() + project.name
                description = 'Open api code generator for Springboot'
                url = 'https://github.com/potjerodekool/openapi-generator'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'Evert'
                        name = 'Evert Tigchelaar'
                        email = 'everttigchelaar@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/potjerodekool/openapi-generator.git'
                    developerConnection = 'scm:git:git://github.com/potjerodekool/openapi-generator.git'
                    url = 'http://github.com/potjerodekool/openapi-generator/tree/master'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/releases'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    useGpgCmd() // YOU NEED THIS. Without this method, gradle will not work with GnuPG keys.
    sign publishing.publications.mavenJava
}


javadoc {
    options.addBooleanOption('html5', true)
}