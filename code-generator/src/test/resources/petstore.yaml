openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /login:
    post:
      summary: Login
      operationId: login
      security:
        - {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 'Login success response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: 'Unauthorised'
  /pets:
    post:
      summary: Create a pet
      operationId: createPet
      tags:
        - pets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetDto'
      responses:
        '201':
          description: 'Null response'
        default:
          description: 'unexpected error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'A paged array of pets'
          headers:
            x-next:
              description: 'A link to the next page of responses'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetsDto'
        default:
          description: 'unexpected error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: getPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: The id of the pet to retrieve
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
      responses:
        '200':
          description: 'Expected response to a valid request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetDto'
        default:
          description: 'unexpected error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    put:
      summary: Update a pet
      operationId: updatePet
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: The id of the pet to update
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetDto'
      responses:
        '204':
          description: 'No content'
        '404':
          description: 'Not found'
        '422':
          description: 'Unprocessable request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    patch:
      summary: Patch a pet
      operationId: patchPet
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: The id of the pet to patch
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetDto'
      responses:
        '204':
          description: 'No content'
        '404':
          description: 'Not found'
        '422':
          description: 'Unprocessable request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    delete:
      summary: Delete a pet
      operationId: deletePet
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: The id of the pet to delete
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
      responses:
        '204':
          description: 'No content'
        '404':
          description: 'Not found'
  /pets/{petId}/image:
    get:
      summary: Info image for a specific pet
      operationId: getPetImageById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: The id of the pet of which image to retrieve
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
      responses:
        '200':
          description: 'Expected response to a valid request'
          content:
            '*/*':
              schema:
                type: string
                format: binary
    put:
      summary: Update image of pet
      operationId: updatePetImage
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: The id of the pet to update
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
      requestBody:
        content:
          'multipart/form-data':
            schema:
              required: ["image"]
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '204':
          description: 'No content'
  /pets/{petId}/details:
    get:
      summary: Details for a specific pet
      operationId: getPetDetailsById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: The id of the pet of which details to retrieve
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
      responses:
        '200':
          description: 'Expected response to a valid request'
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object

components:
  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          format: password
          writeOnly: true
    LoginResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          readOnly: true
    PetDto:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
          description: Name of Pet
        birthDate:
          type: string
          format: date
          nullable: true
          x-allowed-value: pastOrPresent
        tag:
          type: string
          nullable: true
    PetsDto:
      type: array
      items:
        $ref: '#/components/schemas/PetDto'
    ErrorDto:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          readOnly: true
        message:
          type: string
          readOnly: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []