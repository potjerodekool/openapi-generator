---
openapi: 3.0.1
info:
  title: Swagger Petstore
  license:
    name: MIT
  version: 1.0.0
servers:
  - url: http://petstore.swagger.io/v1
    description: petstore url
security:
  - bearerAuth: []
paths:
  "/pets/{petId}":
    get:
      tags:
        - pets
      summary: Info for a specific pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: The id of the pet to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PetDto"
              examples:
                foo:
                  summary: pets response example
                  description: foo
                  value:
                    id: 1
                    name: Sylvester
                    tag: cat
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDto"
      security: [
        {
          "petstore_auth": [
            "write:pets",
            "read:pets"
          ]
        },
        {
        }
      ]
    put:
      tags:
        - pets
      summary: Update a pet
      operationId: updatePet
      parameters:
        - name: petId
          in: path
          description: The id of the pet to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PetDto"
      responses:
        '204':
          description: No content
        '404':
          description: Not found
        '422':
          description: Unprocessable request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDto"
      security: []
    delete:
      tags:
        - pets
      summary: Delete a pet
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          description: The id of the pet to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
        '404':
          description: Not found
      security: []
    patch:
      tags:
        - pets
      summary: Patch a pet
      operationId: patchPet
      parameters:
        - name: petId
          in: path
          description: The id of the pet to patch
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PetDto"
      responses:
        '204':
          description: No content
        '404':
          description: Not found
        '422':
          description: Unprocessable request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDto"
      security: []
  "/pets/{petId}/image":
    get:
      tags:
        - pets
      summary: Info image for a specific pet
      operationId: getPetImageById
      parameters:
        - name: petId
          in: path
          description: The id of the pet of which image to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            "*/*":
              schema:
                type: string
                format: binary
      security: []
    put:
      tags:
        - pets
      summary: Update image of pet
      operationId: updatePetImage
      parameters:
        - name: petId
          in: path
          description: The id of the pet to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
      responses:
        '204':
          description: No content
      security: []
  "/pets":
    get:
      tags:
        - pets
      summary: List all pets
      operationId: listPets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              style: simple
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PetDto"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDto"
      security: []
    post:
      tags:
        - pets
      summary: Create a pet
      operationId: createPet
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PetDto"
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorDto"
      security: []
  "/login":
    post:
      tags:
        - login-controller
      summary: Login
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LoginRequest"
      responses:
        '200':
          description: Login success response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LoginResponse"
        '401':
          description: Unauthorised
      security: []
  "/pets/{petId}/details":
    get:
      tags:
        - pets
      summary: Details for a specific pet
      operationId: getPetDetailsById
      parameters:
        - name: petId
          in: path
          description: The id of the pet of which details to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
      security: []
components:
  schemas:
    PetDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
          description: Name of Pet
        birthDate:
          type: string
          format: date
          nullable: true
          x-validation:
            allowed-value: pastOrPresent
        tag:
          type: string
          nullable: true
    ErrorDto:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
          format: int32
          readOnly: true
        message:
          type: string
          readOnly: true
    LoginRequest:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          format: password
          writeOnly: true
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          readOnly: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
